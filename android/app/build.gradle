plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "0.0.1"
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
} else {
    // If the file does not exist, use environment variables (probably in a gh runner)
    keystoreProperties['storeFile'] = 'release-key.jks' ?: "<NONE>"
    keystoreProperties['storePassword'] = System.getenv('KEY_PASSWORD') ?: "<NONE>"
    keystoreProperties['keyAlias'] = 'vup-chat' ?: "<NONE>"
    keystoreProperties['keyPassword'] = System.getenv('KEY_PASSWORD') ?: "<NONE>" // They're the same
}

android {
    namespace = "chat.vup.app"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion
    project.ext.set("appName", "vup-chat")

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId = "app.vup.vupchat"
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = 1
        versionName = "0.5.20"
        setProperty("archivesBaseName", "$appName-$versionName-$versionCode")

    }

    signingConfigs {
       release {
           keyAlias keystoreProperties['keyAlias']
           keyPassword keystoreProperties['keyPassword']
           storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
           storePassword keystoreProperties['storePassword']
       }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }
}

flutter {
    source = "../.."
}
