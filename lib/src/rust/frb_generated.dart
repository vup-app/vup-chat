// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.2.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.2.0';

  @override
  int get rustContentHash => -593921613;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_vup_chat',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  CredentialWithKey crateApiSimpleMlsCredentialAutoAccessorGetCredentialWithKey(
      {required MlsCredential that});

  SignatureKeyPair crateApiSimpleMlsCredentialAutoAccessorGetSigner(
      {required MlsCredential that});

  void crateApiSimpleMlsCredentialAutoAccessorSetCredentialWithKey(
      {required MlsCredential that,
      required CredentialWithKey credentialWithKey});

  void crateApiSimpleMlsCredentialAutoAccessorSetSigner(
      {required MlsCredential that, required SignatureKeyPair signer});

  ArcHashMapVecU8VecU8 crateApiSimpleMyMemoryKeyStoreAutoAccessorGetValues(
      {required MyMemoryKeyStore that});

  void crateApiSimpleMyMemoryKeyStoreAutoAccessorSetValues(
      {required MyMemoryKeyStore that, required ArcHashMapVecU8VecU8 values});

  MyOpenMlsRustCrypto crateApiSimpleOpenMlsConfigAutoAccessorGetBackend(
      {required OpenMlsConfig that});

  Ciphersuite crateApiSimpleOpenMlsConfigAutoAccessorGetCiphersuite(
      {required OpenMlsConfig that});

  CredentialType crateApiSimpleOpenMlsConfigAutoAccessorGetCredentialType(
      {required OpenMlsConfig that});

  MlsGroupConfig crateApiSimpleOpenMlsConfigAutoAccessorGetMlsGroupConfig(
      {required OpenMlsConfig that});

  SignatureScheme crateApiSimpleOpenMlsConfigAutoAccessorGetSignatureAlgorithm(
      {required OpenMlsConfig that});

  void crateApiSimpleOpenMlsConfigAutoAccessorSetBackend(
      {required OpenMlsConfig that, required MyOpenMlsRustCrypto backend});

  void crateApiSimpleOpenMlsConfigAutoAccessorSetCiphersuite(
      {required OpenMlsConfig that, required Ciphersuite ciphersuite});

  void crateApiSimpleOpenMlsConfigAutoAccessorSetCredentialType(
      {required OpenMlsConfig that, required CredentialType credentialType});

  void crateApiSimpleOpenMlsConfigAutoAccessorSetMlsGroupConfig(
      {required OpenMlsConfig that, required MlsGroupConfig mlsGroupConfig});

  void crateApiSimpleOpenMlsConfigAutoAccessorSetSignatureAlgorithm(
      {required OpenMlsConfig that,
      required SignatureScheme signatureAlgorithm});

  Future<void> crateApiSimpleInitApp();

  Future<MlsCredential> crateApiSimpleOpenmlsGenerateCredentialWithKey(
      {required List<int> identity, required OpenMlsConfig config});

  Future<Uint8List> crateApiSimpleOpenmlsGenerateKeyPackage(
      {required SignatureKeyPair signer,
      required CredentialWithKey credentialWithKey,
      required OpenMlsConfig config});

  Future<MLSGroupAddMembersResponse> crateApiSimpleOpenmlsGroupAddMember(
      {required MlsGroup group,
      required SignatureKeyPair signer,
      required List<int> keyPackage,
      required OpenMlsConfig config});

  Future<MlsGroup> crateApiSimpleOpenmlsGroupCreate(
      {required SignatureKeyPair signer,
      required CredentialWithKey credentialWithKey,
      required OpenMlsConfig config});

  Future<Uint8List> crateApiSimpleOpenmlsGroupCreateMessage(
      {required MlsGroup group,
      required SignatureKeyPair signer,
      required List<int> message,
      required OpenMlsConfig config});

  Future<MlsGroup> crateApiSimpleOpenmlsGroupJoin(
      {required List<int> welcomeIn, required OpenMlsConfig config});

  Future<List<GroupMember>> crateApiSimpleOpenmlsGroupListMembers(
      {required MlsGroup group});

  Future<MlsGroup> crateApiSimpleOpenmlsGroupLoad(
      {required List<int> id, required OpenMlsConfig config});

  Future<ProcessIncomingMessageResponse>
      crateApiSimpleOpenmlsGroupProcessIncomingMessage(
          {required MlsGroup group,
          required List<int> mlsMessageIn,
          required OpenMlsConfig config});

  Future<Uint8List> crateApiSimpleOpenmlsGroupSave(
      {required MlsGroup group, required OpenMlsConfig config});

  Future<OpenMlsConfig> crateApiSimpleOpenmlsInitConfig(
      {required Map<Uint8List, Uint8List> keystoreValues});

  Future<Map<Uint8List, Uint8List>> crateApiSimpleOpenmlsKeystoreDump(
      {required OpenMlsConfig config});

  Future<MlsCredential> crateApiSimpleOpenmlsRecoverCredentialWithKey(
      {required List<int> identity,
      required List<int> publicKey,
      required OpenMlsConfig config});

  Future<Uint8List> crateApiSimpleOpenmlsSignerGetPublicKey(
      {required SignatureKeyPair signer});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcHashMapVecU8VecU8;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcHashMapVecU8VecU8;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcHashMapVecU8VecU8Ptr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Ciphersuite;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Ciphersuite;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_CiphersuitePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_CredentialType;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_CredentialType;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_CredentialTypePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_CredentialWithKey;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_CredentialWithKey;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_CredentialWithKeyPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MlsCredential;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MlsCredential;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MlsCredentialPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MlsGroupConfig;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MlsGroupConfig;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MlsGroupConfigPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MyMemoryKeyStore;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MyMemoryKeyStore;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MyMemoryKeyStorePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MyOpenMlsRustCrypto;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MyOpenMlsRustCrypto;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MyOpenMlsRustCryptoPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpenMlsConfig;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpenMlsConfig;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OpenMlsConfigPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MlsGroup;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MlsGroup;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MlsGroupPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SignatureKeyPair;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SignatureKeyPair;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_SignatureKeyPairPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SignatureScheme;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SignatureScheme;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_SignatureSchemePtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  CredentialWithKey crateApiSimpleMlsCredentialAutoAccessorGetCredentialWithKey(
      {required MlsCredential that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMLSCredential(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCredentialWithKey,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiSimpleMlsCredentialAutoAccessorGetCredentialWithKeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSimpleMlsCredentialAutoAccessorGetCredentialWithKeyConstMeta =>
          const TaskConstMeta(
            debugName: "MlsCredential_auto_accessor_get_credential_with_key",
            argNames: ["that"],
          );

  @override
  SignatureKeyPair crateApiSimpleMlsCredentialAutoAccessorGetSigner(
      {required MlsCredential that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMLSCredential(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureKeyPair,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleMlsCredentialAutoAccessorGetSignerConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSimpleMlsCredentialAutoAccessorGetSignerConstMeta =>
          const TaskConstMeta(
            debugName: "MlsCredential_auto_accessor_get_signer",
            argNames: ["that"],
          );

  @override
  void crateApiSimpleMlsCredentialAutoAccessorSetCredentialWithKey(
      {required MlsCredential that,
      required CredentialWithKey credentialWithKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMLSCredential(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCredentialWithKey(
            credentialWithKey, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiSimpleMlsCredentialAutoAccessorSetCredentialWithKeyConstMeta,
      argValues: [that, credentialWithKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSimpleMlsCredentialAutoAccessorSetCredentialWithKeyConstMeta =>
          const TaskConstMeta(
            debugName: "MlsCredential_auto_accessor_set_credential_with_key",
            argNames: ["that", "credentialWithKey"],
          );

  @override
  void crateApiSimpleMlsCredentialAutoAccessorSetSigner(
      {required MlsCredential that, required SignatureKeyPair signer}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMLSCredential(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureKeyPair(
            signer, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleMlsCredentialAutoAccessorSetSignerConstMeta,
      argValues: [that, signer],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSimpleMlsCredentialAutoAccessorSetSignerConstMeta =>
          const TaskConstMeta(
            debugName: "MlsCredential_auto_accessor_set_signer",
            argNames: ["that", "signer"],
          );

  @override
  ArcHashMapVecU8VecU8 crateApiSimpleMyMemoryKeyStoreAutoAccessorGetValues(
      {required MyMemoryKeyStore that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMemoryKeyStore(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcRwLockHashMapVecu8Vecu8,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleMyMemoryKeyStoreAutoAccessorGetValuesConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSimpleMyMemoryKeyStoreAutoAccessorGetValuesConstMeta =>
          const TaskConstMeta(
            debugName: "MyMemoryKeyStore_auto_accessor_get_values",
            argNames: ["that"],
          );

  @override
  void crateApiSimpleMyMemoryKeyStoreAutoAccessorSetValues(
      {required MyMemoryKeyStore that, required ArcHashMapVecU8VecU8 values}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMemoryKeyStore(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcRwLockHashMapVecu8Vecu8(
            values, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleMyMemoryKeyStoreAutoAccessorSetValuesConstMeta,
      argValues: [that, values],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSimpleMyMemoryKeyStoreAutoAccessorSetValuesConstMeta =>
          const TaskConstMeta(
            debugName: "MyMemoryKeyStore_auto_accessor_set_values",
            argNames: ["that", "values"],
          );

  @override
  MyOpenMlsRustCrypto crateApiSimpleOpenMlsConfigAutoAccessorGetBackend(
      {required OpenMlsConfig that}) {
    throw UnimplementedError();
/*     return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpenMLSConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyOpenMlsRustCrypto,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleOpenMlsConfigAutoAccessorGetBackendConstMeta,
      argValues: [that],
      apiImpl: this,
    )); */
  }

  TaskConstMeta
      get kCrateApiSimpleOpenMlsConfigAutoAccessorGetBackendConstMeta =>
          const TaskConstMeta(
            debugName: "OpenMlsConfig_auto_accessor_get_backend",
            argNames: ["that"],
          );

  @override
  Ciphersuite crateApiSimpleOpenMlsConfigAutoAccessorGetCiphersuite(
      {required OpenMlsConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpenMLSConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCiphersuite,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiSimpleOpenMlsConfigAutoAccessorGetCiphersuiteConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSimpleOpenMlsConfigAutoAccessorGetCiphersuiteConstMeta =>
          const TaskConstMeta(
            debugName: "OpenMlsConfig_auto_accessor_get_ciphersuite",
            argNames: ["that"],
          );

  @override
  CredentialType crateApiSimpleOpenMlsConfigAutoAccessorGetCredentialType(
      {required OpenMlsConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpenMLSConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCredentialType,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiSimpleOpenMlsConfigAutoAccessorGetCredentialTypeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSimpleOpenMlsConfigAutoAccessorGetCredentialTypeConstMeta =>
          const TaskConstMeta(
            debugName: "OpenMlsConfig_auto_accessor_get_credential_type",
            argNames: ["that"],
          );

  @override
  MlsGroupConfig crateApiSimpleOpenMlsConfigAutoAccessorGetMlsGroupConfig(
      {required OpenMlsConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpenMLSConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMlsGroupConfig,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiSimpleOpenMlsConfigAutoAccessorGetMlsGroupConfigConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSimpleOpenMlsConfigAutoAccessorGetMlsGroupConfigConstMeta =>
          const TaskConstMeta(
            debugName: "OpenMlsConfig_auto_accessor_get_mls_group_config",
            argNames: ["that"],
          );

  @override
  SignatureScheme crateApiSimpleOpenMlsConfigAutoAccessorGetSignatureAlgorithm(
      {required OpenMlsConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpenMLSConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureScheme,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiSimpleOpenMlsConfigAutoAccessorGetSignatureAlgorithmConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSimpleOpenMlsConfigAutoAccessorGetSignatureAlgorithmConstMeta =>
          const TaskConstMeta(
            debugName: "OpenMlsConfig_auto_accessor_get_signature_algorithm",
            argNames: ["that"],
          );

  @override
  void crateApiSimpleOpenMlsConfigAutoAccessorSetBackend(
      {required OpenMlsConfig that, required MyOpenMlsRustCrypto backend}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpenMLSConfig(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyOpenMlsRustCrypto(
            backend, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleOpenMlsConfigAutoAccessorSetBackendConstMeta,
      argValues: [that, backend],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSimpleOpenMlsConfigAutoAccessorSetBackendConstMeta =>
          const TaskConstMeta(
            debugName: "OpenMlsConfig_auto_accessor_set_backend",
            argNames: ["that", "backend"],
          );

  @override
  void crateApiSimpleOpenMlsConfigAutoAccessorSetCiphersuite(
      {required OpenMlsConfig that, required Ciphersuite ciphersuite}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpenMLSConfig(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCiphersuite(
            ciphersuite, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiSimpleOpenMlsConfigAutoAccessorSetCiphersuiteConstMeta,
      argValues: [that, ciphersuite],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSimpleOpenMlsConfigAutoAccessorSetCiphersuiteConstMeta =>
          const TaskConstMeta(
            debugName: "OpenMlsConfig_auto_accessor_set_ciphersuite",
            argNames: ["that", "ciphersuite"],
          );

  @override
  void crateApiSimpleOpenMlsConfigAutoAccessorSetCredentialType(
      {required OpenMlsConfig that, required CredentialType credentialType}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpenMLSConfig(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCredentialType(
            credentialType, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiSimpleOpenMlsConfigAutoAccessorSetCredentialTypeConstMeta,
      argValues: [that, credentialType],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSimpleOpenMlsConfigAutoAccessorSetCredentialTypeConstMeta =>
          const TaskConstMeta(
            debugName: "OpenMlsConfig_auto_accessor_set_credential_type",
            argNames: ["that", "credentialType"],
          );

  @override
  void crateApiSimpleOpenMlsConfigAutoAccessorSetMlsGroupConfig(
      {required OpenMlsConfig that, required MlsGroupConfig mlsGroupConfig}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpenMLSConfig(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMlsGroupConfig(
            mlsGroupConfig, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiSimpleOpenMlsConfigAutoAccessorSetMlsGroupConfigConstMeta,
      argValues: [that, mlsGroupConfig],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSimpleOpenMlsConfigAutoAccessorSetMlsGroupConfigConstMeta =>
          const TaskConstMeta(
            debugName: "OpenMlsConfig_auto_accessor_set_mls_group_config",
            argNames: ["that", "mlsGroupConfig"],
          );

  @override
  void crateApiSimpleOpenMlsConfigAutoAccessorSetSignatureAlgorithm(
      {required OpenMlsConfig that,
      required SignatureScheme signatureAlgorithm}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpenMLSConfig(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureScheme(
            signatureAlgorithm, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiSimpleOpenMlsConfigAutoAccessorSetSignatureAlgorithmConstMeta,
      argValues: [that, signatureAlgorithm],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSimpleOpenMlsConfigAutoAccessorSetSignatureAlgorithmConstMeta =>
          const TaskConstMeta(
            debugName: "OpenMlsConfig_auto_accessor_set_signature_algorithm",
            argNames: ["that", "signatureAlgorithm"],
          );

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<MlsCredential> crateApiSimpleOpenmlsGenerateCredentialWithKey(
      {required List<int> identity, required OpenMlsConfig config}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(identity, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpenMLSConfig(
            config, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMLSCredential,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleOpenmlsGenerateCredentialWithKeyConstMeta,
      argValues: [identity, config],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleOpenmlsGenerateCredentialWithKeyConstMeta =>
      const TaskConstMeta(
        debugName: "openmls_generate_credential_with_key",
        argNames: ["identity", "config"],
      );

  @override
  Future<Uint8List> crateApiSimpleOpenmlsGenerateKeyPackage(
      {required SignatureKeyPair signer,
      required CredentialWithKey credentialWithKey,
      required OpenMlsConfig config}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureKeyPair(
            signer, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCredentialWithKey(
            credentialWithKey, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpenMLSConfig(
            config, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleOpenmlsGenerateKeyPackageConstMeta,
      argValues: [signer, credentialWithKey, config],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleOpenmlsGenerateKeyPackageConstMeta =>
      const TaskConstMeta(
        debugName: "openmls_generate_key_package",
        argNames: ["signer", "credentialWithKey", "config"],
      );

  @override
  Future<MLSGroupAddMembersResponse> crateApiSimpleOpenmlsGroupAddMember(
      {required MlsGroup group,
      required SignatureKeyPair signer,
      required List<int> keyPackage,
      required OpenMlsConfig config}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRwLockMlsGroup(
            group, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureKeyPair(
            signer, serializer);
        sse_encode_list_prim_u_8_loose(keyPackage, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpenMLSConfig(
            config, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_mls_group_add_members_response,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleOpenmlsGroupAddMemberConstMeta,
      argValues: [group, signer, keyPackage, config],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleOpenmlsGroupAddMemberConstMeta =>
      const TaskConstMeta(
        debugName: "openmls_group_add_member",
        argNames: ["group", "signer", "keyPackage", "config"],
      );

  @override
  Future<MlsGroup> crateApiSimpleOpenmlsGroupCreate(
      {required SignatureKeyPair signer,
      required CredentialWithKey credentialWithKey,
      required OpenMlsConfig config}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureKeyPair(
            signer, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCredentialWithKey(
            credentialWithKey, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpenMLSConfig(
            config, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRwLockMlsGroup,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleOpenmlsGroupCreateConstMeta,
      argValues: [signer, credentialWithKey, config],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleOpenmlsGroupCreateConstMeta =>
      const TaskConstMeta(
        debugName: "openmls_group_create",
        argNames: ["signer", "credentialWithKey", "config"],
      );

  @override
  Future<Uint8List> crateApiSimpleOpenmlsGroupCreateMessage(
      {required MlsGroup group,
      required SignatureKeyPair signer,
      required List<int> message,
      required OpenMlsConfig config}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRwLockMlsGroup(
            group, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureKeyPair(
            signer, serializer);
        sse_encode_list_prim_u_8_loose(message, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpenMLSConfig(
            config, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleOpenmlsGroupCreateMessageConstMeta,
      argValues: [group, signer, message, config],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleOpenmlsGroupCreateMessageConstMeta =>
      const TaskConstMeta(
        debugName: "openmls_group_create_message",
        argNames: ["group", "signer", "message", "config"],
      );

  @override
  Future<MlsGroup> crateApiSimpleOpenmlsGroupJoin(
      {required List<int> welcomeIn, required OpenMlsConfig config}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(welcomeIn, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpenMLSConfig(
            config, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRwLockMlsGroup,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleOpenmlsGroupJoinConstMeta,
      argValues: [welcomeIn, config],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleOpenmlsGroupJoinConstMeta =>
      const TaskConstMeta(
        debugName: "openmls_group_join",
        argNames: ["welcomeIn", "config"],
      );

  @override
  Future<List<GroupMember>> crateApiSimpleOpenmlsGroupListMembers(
      {required MlsGroup group}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRwLockMlsGroup(
            group, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 24, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_group_member,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleOpenmlsGroupListMembersConstMeta,
      argValues: [group],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleOpenmlsGroupListMembersConstMeta =>
      const TaskConstMeta(
        debugName: "openmls_group_list_members",
        argNames: ["group"],
      );

  @override
  Future<MlsGroup> crateApiSimpleOpenmlsGroupLoad(
      {required List<int> id, required OpenMlsConfig config}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(id, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpenMLSConfig(
            config, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 25, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRwLockMlsGroup,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleOpenmlsGroupLoadConstMeta,
      argValues: [id, config],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleOpenmlsGroupLoadConstMeta =>
      const TaskConstMeta(
        debugName: "openmls_group_load",
        argNames: ["id", "config"],
      );

  @override
  Future<ProcessIncomingMessageResponse>
      crateApiSimpleOpenmlsGroupProcessIncomingMessage(
          {required MlsGroup group,
          required List<int> mlsMessageIn,
          required OpenMlsConfig config}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRwLockMlsGroup(
            group, serializer);
        sse_encode_list_prim_u_8_loose(mlsMessageIn, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpenMLSConfig(
            config, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 26, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_process_incoming_message_response,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleOpenmlsGroupProcessIncomingMessageConstMeta,
      argValues: [group, mlsMessageIn, config],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSimpleOpenmlsGroupProcessIncomingMessageConstMeta =>
          const TaskConstMeta(
            debugName: "openmls_group_process_incoming_message",
            argNames: ["group", "mlsMessageIn", "config"],
          );

  @override
  Future<Uint8List> crateApiSimpleOpenmlsGroupSave(
      {required MlsGroup group, required OpenMlsConfig config}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRwLockMlsGroup(
            group, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpenMLSConfig(
            config, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 27, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleOpenmlsGroupSaveConstMeta,
      argValues: [group, config],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleOpenmlsGroupSaveConstMeta =>
      const TaskConstMeta(
        debugName: "openmls_group_save",
        argNames: ["group", "config"],
      );

  @override
  Future<OpenMlsConfig> crateApiSimpleOpenmlsInitConfig(
      {required Map<Uint8List, Uint8List> keystoreValues}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_list_prim_u_8_strict_list_prim_u_8_strict(
            keystoreValues, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 28, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpenMLSConfig,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleOpenmlsInitConfigConstMeta,
      argValues: [keystoreValues],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleOpenmlsInitConfigConstMeta =>
      const TaskConstMeta(
        debugName: "openmls_init_config",
        argNames: ["keystoreValues"],
      );

  @override
  Future<Map<Uint8List, Uint8List>> crateApiSimpleOpenmlsKeystoreDump(
      {required OpenMlsConfig config}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpenMLSConfig(
            config, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 29, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Map_list_prim_u_8_strict_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleOpenmlsKeystoreDumpConstMeta,
      argValues: [config],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleOpenmlsKeystoreDumpConstMeta =>
      const TaskConstMeta(
        debugName: "openmls_keystore_dump",
        argNames: ["config"],
      );

  @override
  Future<MlsCredential> crateApiSimpleOpenmlsRecoverCredentialWithKey(
      {required List<int> identity,
      required List<int> publicKey,
      required OpenMlsConfig config}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(identity, serializer);
        sse_encode_list_prim_u_8_loose(publicKey, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpenMLSConfig(
            config, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 30, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMLSCredential,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleOpenmlsRecoverCredentialWithKeyConstMeta,
      argValues: [identity, publicKey, config],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleOpenmlsRecoverCredentialWithKeyConstMeta =>
      const TaskConstMeta(
        debugName: "openmls_recover_credential_with_key",
        argNames: ["identity", "publicKey", "config"],
      );

  @override
  Future<Uint8List> crateApiSimpleOpenmlsSignerGetPublicKey(
      {required SignatureKeyPair signer}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureKeyPair(
            signer, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 31, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleOpenmlsSignerGetPublicKeyConstMeta,
      argValues: [signer],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleOpenmlsSignerGetPublicKeyConstMeta =>
      const TaskConstMeta(
        debugName: "openmls_signer_get_public_key",
        argNames: ["signer"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcHashMapVecU8VecU8 => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcRwLockHashMapVecu8Vecu8;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcHashMapVecU8VecU8 => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcRwLockHashMapVecu8Vecu8;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Ciphersuite => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCiphersuite;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Ciphersuite => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCiphersuite;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_CredentialType => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCredentialType;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_CredentialType => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCredentialType;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_CredentialWithKey => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCredentialWithKey;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_CredentialWithKey => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCredentialWithKey;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MlsCredential => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMLSCredential;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MlsCredential => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMLSCredential;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MlsGroupConfig => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMlsGroupConfig;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MlsGroupConfig => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMlsGroupConfig;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MyMemoryKeyStore => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMemoryKeyStore;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MyMemoryKeyStore => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMemoryKeyStore;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MyOpenMlsRustCrypto => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyOpenMlsRustCrypto;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MyOpenMlsRustCrypto => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyOpenMlsRustCrypto;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpenMlsConfig => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpenMLSConfig;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpenMlsConfig => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpenMLSConfig;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MlsGroup => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRwLockMlsGroup;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MlsGroup => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRwLockMlsGroup;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SignatureKeyPair => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureKeyPair;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SignatureKeyPair => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureKeyPair;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SignatureScheme => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureScheme;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SignatureScheme => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureScheme;

  @protected
  ArcHashMapVecU8VecU8
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcRwLockHashMapVecu8Vecu8(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcHashMapVecU8VecU8Impl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Ciphersuite
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCiphersuite(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CiphersuiteImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  CredentialType
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCredentialType(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CredentialTypeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  CredentialWithKey
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCredentialWithKey(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CredentialWithKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MlsCredential
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMLSCredential(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MlsCredentialImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MlsGroupConfig
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMlsGroupConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MlsGroupConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MyMemoryKeyStore
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMemoryKeyStore(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MyMemoryKeyStoreImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MyOpenMlsRustCrypto
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyOpenMlsRustCrypto(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MyOpenMlsRustCryptoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OpenMlsConfig
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpenMLSConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpenMlsConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MlsGroup
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRwLockMlsGroup(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MlsGroupImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SignatureKeyPair
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureKeyPair(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SignatureKeyPairImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SignatureScheme
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureScheme(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SignatureSchemeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MlsCredential
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMLSCredential(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MlsCredentialImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MyMemoryKeyStore
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMemoryKeyStore(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MyMemoryKeyStoreImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OpenMlsConfig
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpenMLSConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpenMlsConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  CredentialWithKey
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCredentialWithKey(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CredentialWithKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MlsCredential
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMLSCredential(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MlsCredentialImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MyMemoryKeyStore
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMemoryKeyStore(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MyMemoryKeyStoreImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OpenMlsConfig
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpenMLSConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpenMlsConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MlsGroup
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRwLockMlsGroup(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MlsGroupImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SignatureKeyPair
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureKeyPair(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SignatureKeyPairImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Map<Uint8List, Uint8List>
      dco_decode_Map_list_prim_u_8_strict_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_list_prim_u_8_strict_list_prim_u_8_strict(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  ArcHashMapVecU8VecU8
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcRwLockHashMapVecu8Vecu8(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcHashMapVecU8VecU8Impl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Ciphersuite
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCiphersuite(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CiphersuiteImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  CredentialType
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCredentialType(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CredentialTypeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  CredentialWithKey
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCredentialWithKey(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CredentialWithKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MlsCredential
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMLSCredential(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MlsCredentialImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MlsGroupConfig
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMlsGroupConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MlsGroupConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MyMemoryKeyStore
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMemoryKeyStore(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MyMemoryKeyStoreImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MyOpenMlsRustCrypto
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyOpenMlsRustCrypto(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MyOpenMlsRustCryptoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OpenMlsConfig
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpenMLSConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpenMlsConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MlsGroup
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRwLockMlsGroup(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MlsGroupImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SignatureKeyPair
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureKeyPair(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SignatureKeyPairImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SignatureScheme
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureScheme(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SignatureSchemeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  GroupMember dco_decode_group_member(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return GroupMember(
      identity: dco_decode_list_prim_u_8_strict(arr[0]),
      index: dco_decode_u_32(arr[1]),
      signatureKey: dco_decode_list_prim_u_8_strict(arr[2]),
    );
  }

  @protected
  List<GroupMember> dco_decode_list_group_member(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_group_member).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(Uint8List, Uint8List)>
      dco_decode_list_record_list_prim_u_8_strict_list_prim_u_8_strict(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_list_prim_u_8_strict_list_prim_u_8_strict)
        .toList();
  }

  @protected
  MLSGroupAddMembersResponse dco_decode_mls_group_add_members_response(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MLSGroupAddMembersResponse(
      mlsMessageOut: dco_decode_list_prim_u_8_strict(arr[0]),
      welcomeOut: dco_decode_list_prim_u_8_strict(arr[1]),
    );
  }

  @protected
  ProcessIncomingMessageResponse dco_decode_process_incoming_message_response(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return ProcessIncomingMessageResponse(
      isApplicationMessage: dco_decode_bool(arr[0]),
      applicationMessage: dco_decode_list_prim_u_8_strict(arr[1]),
      identity: dco_decode_list_prim_u_8_strict(arr[2]),
      sender: dco_decode_list_prim_u_8_strict(arr[3]),
      epoch: dco_decode_u_64(arr[4]),
    );
  }

  @protected
  (Uint8List, Uint8List)
      dco_decode_record_list_prim_u_8_strict_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_list_prim_u_8_strict(arr[0]),
      dco_decode_list_prim_u_8_strict(arr[1]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  ArcHashMapVecU8VecU8
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcRwLockHashMapVecu8Vecu8(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcHashMapVecU8VecU8Impl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Ciphersuite
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCiphersuite(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CiphersuiteImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  CredentialType
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCredentialType(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CredentialTypeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  CredentialWithKey
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCredentialWithKey(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CredentialWithKeyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MlsCredential
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMLSCredential(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MlsCredentialImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MlsGroupConfig
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMlsGroupConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MlsGroupConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MyMemoryKeyStore
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMemoryKeyStore(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MyMemoryKeyStoreImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MyOpenMlsRustCrypto
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyOpenMlsRustCrypto(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MyOpenMlsRustCryptoImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpenMlsConfig
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpenMLSConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpenMlsConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MlsGroup
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRwLockMlsGroup(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MlsGroupImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SignatureKeyPair
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureKeyPair(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SignatureKeyPairImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SignatureScheme
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureScheme(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SignatureSchemeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MlsCredential
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMLSCredential(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MlsCredentialImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MyMemoryKeyStore
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMemoryKeyStore(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MyMemoryKeyStoreImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpenMlsConfig
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpenMLSConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpenMlsConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  CredentialWithKey
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCredentialWithKey(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CredentialWithKeyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MlsCredential
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMLSCredential(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MlsCredentialImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MyMemoryKeyStore
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMemoryKeyStore(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MyMemoryKeyStoreImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpenMlsConfig
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpenMLSConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpenMlsConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MlsGroup
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRwLockMlsGroup(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MlsGroupImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SignatureKeyPair
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureKeyPair(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SignatureKeyPairImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Map<Uint8List, Uint8List>
      sse_decode_Map_list_prim_u_8_strict_list_prim_u_8_strict(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_record_list_prim_u_8_strict_list_prim_u_8_strict(
            deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  ArcHashMapVecU8VecU8
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcRwLockHashMapVecu8Vecu8(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcHashMapVecU8VecU8Impl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Ciphersuite
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCiphersuite(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CiphersuiteImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  CredentialType
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCredentialType(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CredentialTypeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  CredentialWithKey
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCredentialWithKey(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CredentialWithKeyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MlsCredential
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMLSCredential(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MlsCredentialImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MlsGroupConfig
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMlsGroupConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MlsGroupConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MyMemoryKeyStore
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMemoryKeyStore(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MyMemoryKeyStoreImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MyOpenMlsRustCrypto
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyOpenMlsRustCrypto(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MyOpenMlsRustCryptoImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpenMlsConfig
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpenMLSConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpenMlsConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MlsGroup
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRwLockMlsGroup(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MlsGroupImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SignatureKeyPair
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureKeyPair(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SignatureKeyPairImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SignatureScheme
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureScheme(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SignatureSchemeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  GroupMember sse_decode_group_member(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_identity = sse_decode_list_prim_u_8_strict(deserializer);
    var var_index = sse_decode_u_32(deserializer);
    var var_signatureKey = sse_decode_list_prim_u_8_strict(deserializer);
    return GroupMember(
        identity: var_identity,
        index: var_index,
        signatureKey: var_signatureKey);
  }

  @protected
  List<GroupMember> sse_decode_list_group_member(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <GroupMember>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_group_member(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(Uint8List, Uint8List)>
      sse_decode_list_record_list_prim_u_8_strict_list_prim_u_8_strict(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(Uint8List, Uint8List)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_list_prim_u_8_strict_list_prim_u_8_strict(
          deserializer));
    }
    return ans_;
  }

  @protected
  MLSGroupAddMembersResponse sse_decode_mls_group_add_members_response(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_mlsMessageOut = sse_decode_list_prim_u_8_strict(deserializer);
    var var_welcomeOut = sse_decode_list_prim_u_8_strict(deserializer);
    return MLSGroupAddMembersResponse(
        mlsMessageOut: var_mlsMessageOut, welcomeOut: var_welcomeOut);
  }

  @protected
  ProcessIncomingMessageResponse sse_decode_process_incoming_message_response(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_isApplicationMessage = sse_decode_bool(deserializer);
    var var_applicationMessage = sse_decode_list_prim_u_8_strict(deserializer);
    var var_identity = sse_decode_list_prim_u_8_strict(deserializer);
    var var_sender = sse_decode_list_prim_u_8_strict(deserializer);
    var var_epoch = sse_decode_u_64(deserializer);
    return ProcessIncomingMessageResponse(
        isApplicationMessage: var_isApplicationMessage,
        applicationMessage: var_applicationMessage,
        identity: var_identity,
        sender: var_sender,
        epoch: var_epoch);
  }

  @protected
  (Uint8List, Uint8List)
      sse_decode_record_list_prim_u_8_strict_list_prim_u_8_strict(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
    var var_field1 = sse_decode_list_prim_u_8_strict(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcRwLockHashMapVecu8Vecu8(
          ArcHashMapVecU8VecU8 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ArcHashMapVecU8VecU8Impl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCiphersuite(
          Ciphersuite self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CiphersuiteImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCredentialType(
          CredentialType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CredentialTypeImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCredentialWithKey(
          CredentialWithKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CredentialWithKeyImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMLSCredential(
          MlsCredential self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MlsCredentialImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMlsGroupConfig(
          MlsGroupConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MlsGroupConfigImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMemoryKeyStore(
          MyMemoryKeyStore self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MyMemoryKeyStoreImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyOpenMlsRustCrypto(
          MyOpenMlsRustCrypto self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MyOpenMlsRustCryptoImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpenMLSConfig(
          OpenMlsConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OpenMlsConfigImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRwLockMlsGroup(
          MlsGroup self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MlsGroupImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureKeyPair(
          SignatureKeyPair self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SignatureKeyPairImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureScheme(
          SignatureScheme self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SignatureSchemeImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMLSCredential(
          MlsCredential self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MlsCredentialImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMemoryKeyStore(
          MyMemoryKeyStore self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MyMemoryKeyStoreImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpenMLSConfig(
          OpenMlsConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OpenMlsConfigImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCredentialWithKey(
          CredentialWithKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CredentialWithKeyImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMLSCredential(
          MlsCredential self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MlsCredentialImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMemoryKeyStore(
          MyMemoryKeyStore self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MyMemoryKeyStoreImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpenMLSConfig(
          OpenMlsConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OpenMlsConfigImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRwLockMlsGroup(
          MlsGroup self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MlsGroupImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureKeyPair(
          SignatureKeyPair self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SignatureKeyPairImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void sse_encode_Map_list_prim_u_8_strict_list_prim_u_8_strict(
      Map<Uint8List, Uint8List> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_list_prim_u_8_strict_list_prim_u_8_strict(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcRwLockHashMapVecu8Vecu8(
          ArcHashMapVecU8VecU8 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ArcHashMapVecU8VecU8Impl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCiphersuite(
          Ciphersuite self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CiphersuiteImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCredentialType(
          CredentialType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CredentialTypeImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCredentialWithKey(
          CredentialWithKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CredentialWithKeyImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMLSCredential(
          MlsCredential self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MlsCredentialImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMlsGroupConfig(
          MlsGroupConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MlsGroupConfigImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMemoryKeyStore(
          MyMemoryKeyStore self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MyMemoryKeyStoreImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyOpenMlsRustCrypto(
          MyOpenMlsRustCrypto self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MyOpenMlsRustCryptoImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpenMLSConfig(
          OpenMlsConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OpenMlsConfigImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRwLockMlsGroup(
          MlsGroup self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MlsGroupImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureKeyPair(
          SignatureKeyPair self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SignatureKeyPairImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignatureScheme(
          SignatureScheme self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SignatureSchemeImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_group_member(GroupMember self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.identity, serializer);
    sse_encode_u_32(self.index, serializer);
    sse_encode_list_prim_u_8_strict(self.signatureKey, serializer);
  }

  @protected
  void sse_encode_list_group_member(
      List<GroupMember> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_group_member(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_list_prim_u_8_strict_list_prim_u_8_strict(
      List<(Uint8List, Uint8List)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_list_prim_u_8_strict_list_prim_u_8_strict(
          item, serializer);
    }
  }

  @protected
  void sse_encode_mls_group_add_members_response(
      MLSGroupAddMembersResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.mlsMessageOut, serializer);
    sse_encode_list_prim_u_8_strict(self.welcomeOut, serializer);
  }

  @protected
  void sse_encode_process_incoming_message_response(
      ProcessIncomingMessageResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.isApplicationMessage, serializer);
    sse_encode_list_prim_u_8_strict(self.applicationMessage, serializer);
    sse_encode_list_prim_u_8_strict(self.identity, serializer);
    sse_encode_list_prim_u_8_strict(self.sender, serializer);
    sse_encode_u_64(self.epoch, serializer);
  }

  @protected
  void sse_encode_record_list_prim_u_8_strict_list_prim_u_8_strict(
      (Uint8List, Uint8List) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.$1, serializer);
    sse_encode_list_prim_u_8_strict(self.$2, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}

@sealed
class ArcHashMapVecU8VecU8Impl extends RustOpaque
    implements ArcHashMapVecU8VecU8 {
  // Not to be used by end users
  ArcHashMapVecU8VecU8Impl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ArcHashMapVecU8VecU8Impl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_ArcHashMapVecU8VecU8,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_ArcHashMapVecU8VecU8,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_ArcHashMapVecU8VecU8Ptr,
  );
}

@sealed
class CiphersuiteImpl extends RustOpaque implements Ciphersuite {
  // Not to be used by end users
  CiphersuiteImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  CiphersuiteImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Ciphersuite,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Ciphersuite,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_CiphersuitePtr,
  );
}

@sealed
class CredentialTypeImpl extends RustOpaque implements CredentialType {
  // Not to be used by end users
  CredentialTypeImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  CredentialTypeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_CredentialType,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_CredentialType,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_CredentialTypePtr,
  );
}

@sealed
class CredentialWithKeyImpl extends RustOpaque implements CredentialWithKey {
  // Not to be used by end users
  CredentialWithKeyImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  CredentialWithKeyImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_CredentialWithKey,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_CredentialWithKey,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_CredentialWithKeyPtr,
  );
}

@sealed
class MlsCredentialImpl extends RustOpaque implements MlsCredential {
  // Not to be used by end users
  MlsCredentialImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MlsCredentialImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_MlsCredential,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_MlsCredential,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_MlsCredentialPtr,
  );

  CredentialWithKey get credentialWithKey => RustLib.instance.api
          .crateApiSimpleMlsCredentialAutoAccessorGetCredentialWithKey(
        that: this,
      );

  SignatureKeyPair get signer =>
      RustLib.instance.api.crateApiSimpleMlsCredentialAutoAccessorGetSigner(
        that: this,
      );

  set credentialWithKey(CredentialWithKey credentialWithKey) => RustLib
      .instance.api
      .crateApiSimpleMlsCredentialAutoAccessorSetCredentialWithKey(
          that: this, credentialWithKey: credentialWithKey);

  set signer(SignatureKeyPair signer) =>
      RustLib.instance.api.crateApiSimpleMlsCredentialAutoAccessorSetSigner(
          that: this, signer: signer);
}

@sealed
class MlsGroupConfigImpl extends RustOpaque implements MlsGroupConfig {
  // Not to be used by end users
  MlsGroupConfigImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MlsGroupConfigImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_MlsGroupConfig,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_MlsGroupConfig,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_MlsGroupConfigPtr,
  );
}

@sealed
class MlsGroupImpl extends RustOpaque implements MlsGroup {
  // Not to be used by end users
  MlsGroupImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MlsGroupImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_MlsGroup,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_MlsGroup,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_MlsGroupPtr,
  );
}

@sealed
class MyMemoryKeyStoreImpl extends RustOpaque implements MyMemoryKeyStore {
  // Not to be used by end users
  MyMemoryKeyStoreImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MyMemoryKeyStoreImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_MyMemoryKeyStore,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_MyMemoryKeyStore,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_MyMemoryKeyStorePtr,
  );

  ArcHashMapVecU8VecU8 get values =>
      RustLib.instance.api.crateApiSimpleMyMemoryKeyStoreAutoAccessorGetValues(
        that: this,
      );

  set values(ArcHashMapVecU8VecU8 values) =>
      RustLib.instance.api.crateApiSimpleMyMemoryKeyStoreAutoAccessorSetValues(
          that: this, values: values);
}

@sealed
class MyOpenMlsRustCryptoImpl extends RustOpaque
    implements MyOpenMlsRustCrypto {
  // Not to be used by end users
  MyOpenMlsRustCryptoImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MyOpenMlsRustCryptoImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_MyOpenMlsRustCrypto,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_MyOpenMlsRustCrypto,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_MyOpenMlsRustCryptoPtr,
  );
}

@sealed
class OpenMlsConfigImpl extends RustOpaque implements OpenMlsConfig {
  // Not to be used by end users
  OpenMlsConfigImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OpenMlsConfigImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_OpenMlsConfig,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_OpenMlsConfig,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_OpenMlsConfigPtr,
  );

  MyOpenMlsRustCrypto get backend =>
      RustLib.instance.api.crateApiSimpleOpenMlsConfigAutoAccessorGetBackend(
        that: this,
      );

  Ciphersuite get ciphersuite => RustLib.instance.api
          .crateApiSimpleOpenMlsConfigAutoAccessorGetCiphersuite(
        that: this,
      );

  CredentialType get credentialType => RustLib.instance.api
          .crateApiSimpleOpenMlsConfigAutoAccessorGetCredentialType(
        that: this,
      );

  MlsGroupConfig get mlsGroupConfig => RustLib.instance.api
          .crateApiSimpleOpenMlsConfigAutoAccessorGetMlsGroupConfig(
        that: this,
      );

  SignatureScheme get signatureAlgorithm => RustLib.instance.api
          .crateApiSimpleOpenMlsConfigAutoAccessorGetSignatureAlgorithm(
        that: this,
      );

  set backend(MyOpenMlsRustCrypto backend) =>
      RustLib.instance.api.crateApiSimpleOpenMlsConfigAutoAccessorSetBackend(
          that: this, backend: backend);

  set ciphersuite(Ciphersuite ciphersuite) => RustLib.instance.api
      .crateApiSimpleOpenMlsConfigAutoAccessorSetCiphersuite(
          that: this, ciphersuite: ciphersuite);

  set credentialType(CredentialType credentialType) => RustLib.instance.api
      .crateApiSimpleOpenMlsConfigAutoAccessorSetCredentialType(
          that: this, credentialType: credentialType);

  set mlsGroupConfig(MlsGroupConfig mlsGroupConfig) => RustLib.instance.api
      .crateApiSimpleOpenMlsConfigAutoAccessorSetMlsGroupConfig(
          that: this, mlsGroupConfig: mlsGroupConfig);

  set signatureAlgorithm(SignatureScheme signatureAlgorithm) => RustLib
      .instance.api
      .crateApiSimpleOpenMlsConfigAutoAccessorSetSignatureAlgorithm(
          that: this, signatureAlgorithm: signatureAlgorithm);
}

@sealed
class SignatureKeyPairImpl extends RustOpaque implements SignatureKeyPair {
  // Not to be used by end users
  SignatureKeyPairImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SignatureKeyPairImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SignatureKeyPair,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SignatureKeyPair,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_SignatureKeyPairPtr,
  );
}

@sealed
class SignatureSchemeImpl extends RustOpaque implements SignatureScheme {
  // Not to be used by end users
  SignatureSchemeImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SignatureSchemeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SignatureScheme,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SignatureScheme,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SignatureSchemePtr,
  );
}
